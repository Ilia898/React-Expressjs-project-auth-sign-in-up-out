// import express from 'express';
// import bodyParser from 'body-parser';
// import mongoose from 'mongoose';
// import { MONGODB_URL, SECRET} from './utils/config';
// import bcrypt from 'bcrypt';
// import * as jwt from 'jsonwebtoken';
// import cookieParser from 'cookie-parser';
// import cors from 'cors';



var app = express();


// app.use(bodyParser.json());
app.use(cookieParser());
app.use(express.urlencoded({extended: false}));

const corsOptions ={
  origin:'http://localhost:5173', 
  credentials: true,            //access-control-allow-credentials:true
  optionSuccessStatus:200
}

app.use(cors(corsOptions));
// 

// mongoose.set("strictQuery", false);
// mongoose.connect(MONGODB_URL!)
//   .then(() => {
//     console.log('Connected to MongoDB');
//   })
//   .catch((error) => {
//     console.error('Error connecting to MongoDB:', error.message);
//   });

// const userSechma = new mongoose.Schema({
//   firstName: String,
//   lastName: String,
//   email: String,
//   passwordHash: String,
// });

// const userData = mongoose.model("userData", userSechma);



app.get("/users", async (req, res) => {
  userData.find({}).then((result) => res.json(result));
});


// app.post("/test", async (req, res) => {
//   const {firstName, lastName, email, password} = req.body.data;
  
//   const saltRoinds = 10
//   const passwordHash = await bcrypt.hash(password, saltRoinds)


//   const newUser = new userData({
//     firstName,
//     lastName,
//     email,
//     passwordHash
//   });

//   newUser.save().then((result) => {
//     console.log("user saved!");
//     mongoose.connection.close();
//   });

//   console.log(newUser);
// });




// app.post("/loginuser", async (req, res) => {
//   const {email, password} =req.body.data

//   const user = await userData.findOne({email})

//   if (!user) {
//     return res.status(404).send({ error: 'User not found' });
//   }

//   const paswordCorrect = user == null ? false : await bcrypt.compare(password, user.passwordHash || '')


//   if(user && paswordCorrect){

//     const userForToken = {
//       email: user.email,
//       name: user.firstName,
//     }

//     jwt.sign(userForToken, SECRET, {}, (err, token) => {
//       if(err) throw err;

//       res.cookie('access_token', token).json({email: user.email, name: user.firstName})
//     })
//   }
  
//   if (!(user && paswordCorrect)) {
//     return res.status(404).json( {error: 'invalid email or password'})
//   }  
// })




// app.get('/profile',(req, res) => {
//   const {access_token: token} = req.cookies;
//   if(token) {
//     jwt.verify(token, SECRET, {}, (err, user) => {
//       if(err) throw err;
//       res.json(user)
//     })
//   } else {
//     res.status(401).json({ error: 'Unauthorized' })
//   }
//   console.log( "es aris tokeni: ", token);
  
// })

// app.get('/logoutuser', (req, res) => {
//   res.clearCookie('access_token');
//   res.json({status: 'success'});
// })



export default app;

